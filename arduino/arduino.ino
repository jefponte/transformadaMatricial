
#include <SoftwareSerial.h>



void setup()
{
  	// Open serial communications and wait for port to open:
	Serial.begin(115200);
	while (!Serial) {
	  ; // wait for serial port to connect. Needed for Native USB only
	}


	Serial.println("Serial ativa. Bom dia!");

}

void loop() // run over and over
{

	Serial.println("E agora, jose?");
	main2();
	delay(20000);   
}

  	
int main2(void)
{
	float x[34][100] = {{1,2,3,2,3,3,3,1,2,2,1,2,2,2,2,2,2,2,3,2,1,2,3,3,2,2,2,2,2,2,2,2,2,3,2,3,3,2,3,2,3,2,2,3,2,2,3,3,2,2,1,2,3,3,2,2,3,2,2,2,2,3,3,2,1,2,2,2,0,2,1,3,2,3,2,2,2,3,3,1,1,1,2,1,2,3,1,0,2,3,3,2,3,2,2,3,2,2,2,3}, {1,2,3,2,2,1,3,2,2,1,1,3,2,2,3,1,1,2,2,2,1,1,2,2,1,2,0,1,2,3,2,2,3,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,3,2,1,2,3,2,1,2,2,1,2,2,2,2,2,3,1,1,1,2,2,3,1,1,2,3,2,1,1,1,2,1,3,1,1,1,2,2,2,2,2,3,1,2,0,3,2,2}, {0,1,3,1,0,1,3,2,2,3,0,1,1,3,2,2,2,0,3,3,1,1,2,3,3,2,1,2,1,3,3,3,0,3,1,2,2,3,2,1,1,2,2,0,2,2,2,1,2,1,1,2,3,2,1,0,2,2,0,1,2,2,1,2,2,2,2,2,0,1,1,1,1,0,0,1,2,3,2,1,0,1,1,1,0,1,1,2,2,2,2,1,2,3,1,2,1,2,3,1}, {2,0,0,2,3,2,0,2,3,0,0,2,1,3,0,1,0,3,2,3,0,2,0,0,3,0,3,0,0,1,1,3,2,3,0,0,0,1,2,2,2,1,1,2,0,2,0,0,0,3,2,0,2,0,3,0,1,1,2,1,1,1,0,0,3,0,3,0,3,3,1,2,3,3,2,2,3,3,0,0,3,0,1,1,2,1,2,1,2,1,3,0,0,0,2,2,0,0,1,1}, {0,0,0,0,0,2,1,0,2,1,0,1,0,2,0,1,0,0,2,1,1,0,0,1,3,1,0,2,1,0,0,1,0,1,0,0,0,0,0,2,0,0,0,0,0,2,0,2,1,3,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,1,2,0,0,0,0,0,2,0,2,0,2,0,1,0,1,2,1,3,0,1,0,0,0,0,0,0,0,0,0}, {0,0,0,0,0,2,0,3,0,0,0,0,0,3,0,0,0,0,2,3,0,0,0,0,3,0,0,0,0,0,0,2,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,0,0,0,0,0,0,2,2,0,0,0}, {0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,3,0,0,0,0,0}, {0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,2,1,0,0,0}, {0,0,3,0,0,0,2,0,2,0,0,0,0,0,3,0,2,1,0,0,0,0,2,1,2,1,0,0,0,2,3,0,0,0,2,2,0,2,0,0,1,0,0,0,0,3,3,0,2,0,0,2,1,0,0,1,0,0,0,1,0,2,0,0,0,0,0,3,0,0,1,2,0,0,0,0,2,0,0,0,0,0,1,2,0,0,0,2,0,0,1,2,0,1,1,0,0,0,2,0}, {0,0,3,0,0,0,0,0,3,2,0,0,0,0,2,0,0,0,0,0,0,0,2,2,0,1,0,0,0,1,2,0,0,0,0,2,0,2,0,0,2,0,0,0,0,0,3,0,1,0,0,2,1,0,0,1,0,0,0,1,1,3,0,0,0,0,0,2,0,0,1,2,0,0,0,0,2,0,1,0,0,0,0,3,0,1,0,3,0,0,1,0,0,1,2,0,0,0,1,0}, {0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0}, {0,0,0,0,0,2,0,2,0,0,0,0,0,2,0,2,0,0,3,3,0,0,0,0,3,0,0,0,0,0,0,2,0,3,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,3,3,0,0,0}, {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1}, {0,0,2,0,1,0,0,0,1,0,0,2,0,0,2,0,1,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,3,0,1,0,0,0,0,2,1,2,0,0,0,2,1,0,1,0,0,0,0,0,0,2,0,0,2,1,0,1,0,0,1,1,2,1,0,1,1,1,2,0,0,1,0,0,2,0,2,1,1,0,0,1,0,0}, {3,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,3,0,2,2,0,0,3,0,3,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, {1,2,0,1,3,2,1,3,0,0,0,0,1,3,0,2,0,3,2,2,1,3,0,2,3,0,2,2,2,0,1,3,3,2,3,0,0,0,2,1,0,2,2,2,0,0,0,2,0,2,2,0,1,0,2,2,2,1,2,1,2,0,2,2,1,2,1,0,0,0,0,0,0,3,1,2,0,0,0,1,0,1,2,0,3,0,2,0,2,1,0,3,2,0,0,3,2,2,0,3}, {2,2,2,1,2,1,1,2,2,3,3,1,1,2,2,2,2,2,3,3,2,2,3,1,2,2,3,2,1,3,2,2,3,2,2,2,2,3,2,2,2,2,2,2,3,2,2,2,3,2,2,2,2,2,2,2,3,2,0,2,1,2,2,2,2,2,2,3,2,2,1,2,2,1,2,1,2,2,2,1,3,1,2,2,3,1,2,3,3,2,2,2,2,2,1,2,2,2,2,2}, {0,1,0,1,0,0,2,0,2,0,0,0,1,0,1,0,1,0,0,0,0,0,2,2,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,1,0,0,2,0,0,1,1,0,0,0,0,0,0,0,0,0,1,2,0,0,1,1,0,2,2,2,0,2,3,1,0,1,0,1,1,0,0,2,1,1,2,0,0,0,1,1,0,0,0,1,1,2,0,2,0,2,1}, {1,1,2,1,1,1,2,2,2,2,0,0,1,1,2,2,2,0,1,2,0,2,1,1,1,2,1,1,1,2,3,2,0,2,1,2,0,3,2,1,3,0,2,1,3,2,2,0,1,1,0,2,2,1,1,1,2,3,0,1,2,2,0,1,1,1,2,3,0,0,1,2,0,0,0,0,2,1,1,1,2,1,1,1,0,2,1,2,1,0,2,1,2,2,2,1,2,2,3,1}, {0,0,3,0,0,0,2,0,2,2,0,2,0,0,3,0,3,0,0,0,0,0,2,1,0,3,0,0,0,2,3,0,0,0,0,2,0,3,0,0,2,0,0,0,0,2,3,0,3,0,0,2,2,0,0,0,0,0,0,1,2,3,0,0,0,0,0,2,0,0,1,2,0,0,0,0,3,1,1,0,0,0,0,2,0,2,0,3,0,0,2,0,0,1,0,0,0,0,3,0}, {3,0,3,0,0,0,2,0,2,3,2,1,0,0,3,0,2,0,0,0,0,0,2,1,0,3,3,0,0,2,3,0,0,0,0,3,1,2,0,0,2,0,0,0,3,3,2,0,2,0,2,2,2,2,0,0,2,0,0,1,1,2,0,0,3,0,2,2,0,3,1,2,3,0,2,0,3,2,2,0,3,0,1,2,0,2,0,3,0,0,3,0,2,2,1,0,0,0,3,0}, {0,0,3,0,0,0,2,0,2,3,0,2,0,0,2,0,3,0,0,0,0,0,2,1,0,2,0,0,0,3,2,0,0,0,0,2,0,2,0,0,2,0,0,0,3,3,3,0,2,0,0,2,2,2,0,0,0,0,0,0,2,2,0,0,0,0,0,3,0,0,2,3,0,0,0,0,3,1,2,0,0,0,0,2,0,3,0,3,0,0,2,0,1,3,0,0,0,0,2,0}, {0,0,2,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,2,0,0,0,1,0,0,1,0,2,0,1,0,0,1,0,0}, {0,0,3,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,2,0,0,0,1,1,0,0,0,0,0,0,1,0,0,2,0,0,0,0,2,2,0,2,0,0,2,1,0,0,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,3,3,0,0,0,0,1,2,0,0,0,1,0,2,0,3,0,1,0,0,1,0,0,2,0,0,0,0,1,0}, {0,0,0,0,0,1,0,3,0,0,0,0,0,2,0,3,0,0,2,2,0,0,0,0,3,0,0,0,0,0,0,2,0,1,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,1,1,0,0,0}, {0,0,3,0,0,0,0,0,3,2,0,0,0,0,0,0,3,0,1,0,0,0,0,2,0,1,0,0,0,2,2,0,0,0,0,1,0,3,0,0,2,0,0,0,0,3,2,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,1,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1}, {0,0,0,0,0,2,0,2,0,0,0,0,0,3,0,3,0,0,2,3,0,0,0,0,2,0,0,0,0,0,0,2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,2,3,0,0,0}, {0,2,0,0,3,0,0,2,0,0,0,0,2,0,0,0,0,3,2,2,2,3,0,0,0,0,0,2,2,0,0,0,2,0,2,0,0,0,1,2,0,2,3,2,0,0,0,3,0,1,1,0,0,0,0,1,2,3,0,1,0,0,1,2,1,2,0,0,0,0,0,0,0,3,0,2,0,0,0,2,1,0,2,0,2,0,0,0,3,3,0,3,3,0,0,0,0,2,0,1}, {0,0,0,0,0,3,0,2,0,0,0,0,0,3,0,3,0,0,1,2,0,0,0,0,3,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,0,2,0,0,0,0,0,0,3,2,0,0,0}, {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0}, {0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0}, {2,2,2,1,2,2,2,2,2,2,1,2,2,2,1,3,0,1,2,3,3,3,2,2,2,2,3,1,2,2,3,2,1,2,1,2,2,2,2,2,1,2,2,0,2,0,3,2,2,2,2,2,1,2,2,1,1,0,2,1,2,2,2,2,3,2,1,2,1,2,2,3,2,2,1,3,1,2,2,1,2,1,1,3,2,2,3,2,3,2,1,2,2,2,1,3,2,1,2,2}, {0,0,0,0,0,3,0,2,0,0,0,0,0,3,0,3,0,0,3,3,0,0,0,0,3,0,0,0,0,0,0,3,0,3,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,2,0,0,0,0,0,0,3,2,0,0,0}, {68,27,38,27,52,32,21,42,9,34,17,19,8,26,70,48,33,55,53,22,22,27,55,65,23,42,63,35,50,22,57,51,55,52,16,55,34,50,22,20,50,70,25,20,20,75,35,45,24,46,45,62,8,56,29,10,37,33,43,8,47,17,36,22,17,44,16,27,30,19,38,36,52,33,8,61,25,32,19,31,17,35,20,25,52,48,47,22,40,47,55,7,51,10,8,36,60,41,51,25}};
	float y[6][100] = {{0,0,1,0,0,0,1,0,1,1,0,1,0,0,1,0,1,0,0,0,0,0,1,1,0,1,0,0,0,1,1,0,0,0,0,1,0,1,0,0,1,0,0,0,1,1,1,0,1,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,1,0,0,0,0,1,0}, {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0}, {0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0}, {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}, {1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0}};
	float a[6][34] = {{ 1.6221853e-02, 3.7995560e-02, 3.1029628e-02, 9.2016811e-03, 1.7968817e-02, 1.0078184e-02,-8.6152809e-02,-5.1351124e-03,-5.3162869e-02, 1.6166380e-02,-4.8621616e-02, 5.3184909e-02,-3.9115094e-02, 5.5446580e-02,-5.6156527e-02,-6.8668415e-03,-1.7271373e-02, 2.7341117e-02,-2.0605198e-02, 1.1276721e-01, 2.0646790e-02, 2.0933435e-01, 3.4970818e-03, 2.4713975e-02, 5.7791355e-02,-7.9430559e-04, 2.0053485e-02,-7.7117623e-02,-2.1972371e-02, 1.5676468e-01, 6.3844243e-03, 1.5053572e-02,-1.4055488e-01, 6.4262139e-04 }, { 5.3406335e-03,-2.6359144e-02, 2.7577878e-02, 1.0545125e-01,-1.5611932e-01,-1.2048070e-01, 2.3411212e-02,-1.4673304e-01, 2.5238300e-02,-4.3337943e-03,-4.9590413e-02,-6.7036463e-02, 2.1393240e-01, 6.7278471e-02,-1.1829713e-01, 1.1060248e-02, 4.0857469e-02,-4.6131741e-03,-3.3367174e-02,-1.2767168e-03,-2.6061301e-02,-8.8983230e-03,-1.8901480e-02, 1.9661871e-02,-2.5600113e-02,-5.1866241e-02,-1.9663038e-02, 1.8810092e-01, 7.1355306e-02,-3.1014511e-01, 1.2309749e-02,-5.5427047e-02, 1.3518718e-01, 2.7871696e-03 }, { 1.7316965e-02,-6.0151396e-03,-1.5240198e-02,-5.4333734e-03,-5.4095460e-03, 1.0024337e-01, 1.5126879e-02, 7.2752742e-02,-1.9125596e-03,-8.3567187e-03, 7.7910884e-03, 3.0616060e-02,-8.8972070e-03,-3.8005257e-03,-5.5758721e-03,-6.1181217e-04, 1.6600999e-03, 1.1755032e-03, 1.2374618e-02, 3.9206900e-03,-2.2849332e-03,-8.4950590e-03, 5.8045467e-03,-4.5146607e-03, 4.9777604e-02, 2.3317151e-03, 6.9488058e-02,-1.0576031e-02, 1.3770717e-02, 2.3783411e-02,-3.4139669e-02, 3.0511261e-03, 1.1103185e-01, 2.1272493e-04 }, { 3.4206197e-02, 2.8562323e-02,-4.8512761e-02,-1.1179609e-01, 2.2822580e-01, 1.8290100e-02, 1.4602098e-01, 7.2213416e-02, 1.2848306e-02,-3.4894080e-02, 4.6375464e-02,-5.0138693e-02,-1.1030782e-01,-5.4766886e-02, 2.9469031e-03, 8.2719325e-02, 5.0569552e-02,-2.1406824e-02, 9.6907025e-02,-3.3685519e-02,-7.1039023e-02,-8.8337815e-02,-3.3708736e-03,-2.5972189e-02,-1.0223659e-01, 5.6870157e-02, 1.2652773e-02,-6.4845939e-02,-1.5563348e-02,-2.0505488e-01,-1.6065113e-01, 8.4720540e-02,-1.7367833e-01,-4.5343057e-04 }, { 4.5324752e-03, 2.4670665e-03, 2.6228778e-02, 1.5176465e-02,-2.5111054e-02, 2.1822907e-03,-1.6569034e-02,-1.8169224e-02, 9.2733505e-03,-1.7468501e-02, 4.5435332e-03,-8.3428203e-03,-1.3727888e-02,-5.6151594e-03, 3.2881759e-01,-3.3263310e-02, 3.4761583e-02, 8.3008148e-04,-1.7639369e-02,-1.7459853e-02, 6.1029170e-03,-4.9039952e-02,-9.9072196e-03, 3.8897510e-04, 1.4629183e-02,-3.2759129e-03,-1.8965782e-02,-3.2275086e-02, 4.1645359e-03, 2.0913087e-02,-5.9719049e-03, 3.6299381e-02,-2.0974259e-02,-6.3296687e-05 }, { 5.7092383e-03, 1.9747966e-02,-1.7954041e-02,-4.7296431e-03,-6.7045615e-03, 9.4986575e-03, 1.0060088e-01,-3.3236520e-02,-2.0656198e-02, 7.3264480e-03, 7.5860731e-02,-2.4469039e-03,-6.5075180e-03, 1.0061464e-03,-2.3430039e-02,-2.5640873e-02, 6.8079525e-03, 1.2867951e-02, 1.0238330e-02, 2.1796123e-02, 6.3396404e-04,-4.3057723e-02,-1.9347633e-02,-1.2471308e-02, 2.2683114e-02, 2.0901194e-03,-1.7198008e-02,-3.0918843e-03,-5.4317979e-03, 2.6878029e-01, 1.8103205e-01, 7.8855694e-03, 2.4410815e-02, 1.7308096e-04}};
	float resultado[6][1];
	float teste[34][1] = {{2}, {3}, {2}, {1}, {0}, {0}, {0}, {0}, {2}, {2}, {0}, {0}, {0}, {1}, {0}, {0}, {2}, {0}, {2}, {2}, {2}, {2}, {0}, {2}, {0}, {2}, {0}, {0}, {0}, {0}, {0}, {3}, {0}, {24}};//Coluna 1
 	int linhas, colunas;
	//treinar((float*)x, (float*)y, (float*)a);
	multiplica((float*)a, 6, 36, (float*)teste, 34, 1, (float*)resultado, &linhas, &colunas);
	exibirDiagnostico((float*)resultado);
	return 0;
}
void treinar(float* x, float* y, float *a){
  float tx[100][34];
  float xTx[34][34];
  float xTxInv[34][34];
  float yTx[6][34];
  int linhasXtx, colunasXtx, l, c;
  transposta((float*)x, 34, 100, (float*)tx);
  multiplica((float*)x, 34, 100, (float*)tx, 100, 34, (float*)xTx, &linhasXtx, &colunasXtx);
  inversa((float*)xTx, 34, (float*)xTxInv);
  multiplica((float*)y, 6, 100, (float*)tx, 100, 34, (float*)yTx, &l, &c);
  multiplica((float*)yTx, 6, 34, (float*)xTxInv, 34, 34, (float*)a, &l, &c);
  
  
}
void inversa(float *matriz, int ordem, float *resultado){
	int linha, coluna, k;
	float pivo, m;
	identidade(matriz, resultado, ordem);


	for(coluna = 0; coluna < ordem; coluna++){
	    pivo = matriz[coluna*ordem+coluna];
		for(k = 0; k < ordem; k++){
			matriz[coluna*ordem+k] = (matriz[coluna*ordem+k])/(pivo); //L1 -> L1/pivo , L2 -> L2/pivo, L3 -> L3/pivo
			resultado[coluna*ordem+k] = (resultado[coluna*ordem+k])/(pivo); //Ex: 1 0 0 / pivo  , 0 1 0 / pivo,   0 0 1/ pivo
		}

		for(linha = 0; linha < ordem; linha++){
			if(linha != coluna){
				m = matriz[linha*ordem+coluna];
				for(k = 0; k < ordem; k++){
					matriz[linha*ordem+k] = (matriz[linha*ordem+k]) - (m*matriz[coluna*ordem+k]); //Ex: L2 -> L2 - ( 1"m" - L1)
					resultado[linha*ordem+k] = (resultado[linha*ordem+k]) - (m*resultado[coluna*ordem+k] );

				}
			}
		}
	}


}
void transposta(float *matriz, int linhas, int colunas, float *transposta)
{
	int i, j;
	for (i = 0; i < linhas; i++){
		for (j = 0; j < colunas; j++){
			transposta[j*linhas+i] = matriz[i*colunas+j];
		}
   }
}

int multiplica(
		float *a, int linhasA, int colunasA,
		float *b, int linhasB, int colunasB,
		float *resultado, int *linhasR, int *colunasR)
{
	int i, j, k;//Variáveis para controle de laços.
	if(colunasA != linhasB){
		printf("Erro na multiplicação: Matrizes incompatíveis para esta operação.\t\n");
		return 0;
	}
	*colunasR = colunasB;
	*linhasR = linhasA;
	for(i = 0; i < linhasA; i++){
		for(j = 0; j < colunasB; j++){
			resultado[i*colunasB+j] = 0.0;
			for(k = 0; k < colunasA; k++){
				resultado[i*(colunasB)+j] += a[i*colunasA+k]*b[k*colunasB+j];
			}
		}
	}
	return 1;
}


void identidade(float *matriz, float *resultado, int ordem){
	int i, j;
	for (i = 0; i < ordem; i++) {
		for (j = 0; j < ordem; j++) {
			if (i == j)
			{
				resultado[i*ordem+j] = 1;
			} else {
				resultado[i*ordem+j] = 0;
			}
		}
	}
}
void mostraMatriz(float *matriz, int linhas, int colunas){
	int i, j;
	for(i = 0; i < linhas; i++){
		for(j = 0; j < colunas; j++){
        Serial.print(matriz[i*colunas+j]);
        Serial.print("\t");
		}
		Serial.print("\n");
	}
}

void exibirDiagnostico(float *matriz) {
	int linhas = 6;
	int colunas = 1;
	int i, j, index = 0;
	float maior = 0.0;
	for (i = 0; i < linhas; i++) {
		for (j = 0; j < colunas; j++) {
			if (matriz[i * colunas + j] > maior) {
				maior = matriz[i * colunas + j];
				index = i;
			}
		}
	}
	switch (index) {
	case 0:
		Serial.println("Psoríase");
		break;
	case 1:
		Serial.println("Dermatite seborréica");
		break;
	case 2:
		Serial.println("Líquen Plano");
		break;
	case 3:
		Serial.println("Pititríase rósea");
		break;
	case 4:
		Serial.println("Dermatite crônica");
		break;
	case 5:
		Serial.println("Pitiríase rubra pilar");
		break;
	}
}
