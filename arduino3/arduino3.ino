/*
  Transformada Matricial - Reconhecimento de Padr√µes
  

 Receives from the hardware serial, sends to software serial.
 Receives from software serial, sends to hardware serial.

 The circuit:
 * RX is digital pin 2 (connect to TX of other device)
 * TX is digital pin 3 (connect to RX of other device)

 Note:
 Not all pins on the Mega and Mega 2560 support change interrupts,
 so only the following can be used for RX:
 10, 11, 12, 13, 50, 51, 52, 53, 62, 63, 64, 65, 66, 67, 68, 69

 Not all pins on the Leonardo support change interrupts,
 so only the following can be used for RX:
 8, 9, 10, 11, 14 (MISO), 15 (SCK), 16 (MOSI).

 created back in the mists of time
 modified 25 May 2012
 by Tom Igoe
 based on Mikal Hart's example

 This example code is in the public domain.

 */
#include <SoftwareSerial.h>



void setup()
{
  	// Open serial communications and wait for port to open:
	Serial.begin(115200);
	while (!Serial) {
	  ; // wait for serial port to connect. Needed for Native USB only
	}
  Serial.println("Sistema em funcionamento. Preparar treinamento da matriz...");
}

void loop() // run over and over
{
	main2();
	delay(22000);   
}

  	
int main2(void)
{
  
  float x[34][100] = {{1,2,3,2,3,3,3,1,2,2,1,2,2,2,2,2,2,2,3,2,1,2,3,3,2,2,2,2,2,2,2,2,2,3,2,3,3,2,3,2,3,2,2,3,2,2,3,3,2,2,1,2,3,3,2,2,3,2,2,2,2,3,3,2,1,2,2,2,0,2,1,3,2,3,2,2,2,3,3,1,1,1,2,1,2,3,1,0,2,3,3,2,3,2,2,3,2,2,2,3}, {1,2,3,2,2,1,3,2,2,1,1,3,2,2,3,1,1,2,2,2,1,1,2,2,1,2,0,1,2,3,2,2,3,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,3,2,1,2,3,2,1,2,2,1,2,2,2,2,2,3,1,1,1,2,2,3,1,1,2,3,2,1,1,1,2,1,3,1,1,1,2,2,2,2,2,3,1,2,0,3,2,2}, {0,1,3,1,0,1,3,2,2,3,0,1,1,3,2,2,2,0,3,3,1,1,2,3,3,2,1,2,1,3,3,3,0,3,1,2,2,3,2,1,1,2,2,0,2,2,2,1,2,1,1,2,3,2,1,0,2,2,0,1,2,2,1,2,2,2,2,2,0,1,1,1,1,0,0,1,2,3,2,1,0,1,1,1,0,1,1,2,2,2,2,1,2,3,1,2,1,2,3,1}, {2,0,0,2,3,2,0,2,3,0,0,2,1,3,0,1,0,3,2,3,0,2,0,0,3,0,3,0,0,1,1,3,2,3,0,0,0,1,2,2,2,1,1,2,0,2,0,0,0,3,2,0,2,0,3,0,1,1,2,1,1,1,0,0,3,0,3,0,3,3,1,2,3,3,2,2,3,3,0,0,3,0,1,1,2,1,2,1,2,1,3,0,0,0,2,2,0,0,1,1}, {0,0,0,0,0,2,1,0,2,1,0,1,0,2,0,1,0,0,2,1,1,0,0,1,3,1,0,2,1,0,0,1,0,1,0,0,0,0,0,2,0,0,0,0,0,2,0,2,1,3,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,1,2,0,0,0,0,0,2,0,2,0,2,0,1,0,1,2,1,3,0,1,0,0,0,0,0,0,0,0,0}, {0,0,0,0,0,2,0,3,0,0,0,0,0,3,0,0,0,0,2,3,0,0,0,0,3,0,0,0,0,0,0,2,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,0,0,0,0,0,0,2,2,0,0,0}, {0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,3,0,0,0,0,0}, {0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,2,1,0,0,0}, {0,0,3,0,0,0,2,0,2,0,0,0,0,0,3,0,2,1,0,0,0,0,2,1,2,1,0,0,0,2,3,0,0,0,2,2,0,2,0,0,1,0,0,0,0,3,3,0,2,0,0,2,1,0,0,1,0,0,0,1,0,2,0,0,0,0,0,3,0,0,1,2,0,0,0,0,2,0,0,0,0,0,1,2,0,0,0,2,0,0,1,2,0,1,1,0,0,0,2,0}, {0,0,3,0,0,0,0,0,3,2,0,0,0,0,2,0,0,0,0,0,0,0,2,2,0,1,0,0,0,1,2,0,0,0,0,2,0,2,0,0,2,0,0,0,0,0,3,0,1,0,0,2,1,0,0,1,0,0,0,1,1,3,0,0,0,0,0,2,0,0,1,2,0,0,0,0,2,0,1,0,0,0,0,3,0,1,0,3,0,0,1,0,0,1,2,0,0,0,1,0}, {0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0}, {0,0,0,0,0,2,0,2,0,0,0,0,0,2,0,2,0,0,3,3,0,0,0,0,3,0,0,0,0,0,0,2,0,3,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,3,3,0,0,0}, {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1}, {0,0,2,0,1,0,0,0,1,0,0,2,0,0,2,0,1,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,3,0,1,0,0,0,0,2,1,2,0,0,0,2,1,0,1,0,0,0,0,0,0,2,0,0,2,1,0,1,0,0,1,1,2,1,0,1,1,1,2,0,0,1,0,0,2,0,2,1,1,0,0,1,0,0}, {3,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,3,0,2,2,0,0,3,0,3,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, {1,2,0,1,3,2,1,3,0,0,0,0,1,3,0,2,0,3,2,2,1,3,0,2,3,0,2,2,2,0,1,3,3,2,3,0,0,0,2,1,0,2,2,2,0,0,0,2,0,2,2,0,1,0,2,2,2,1,2,1,2,0,2,2,1,2,1,0,0,0,0,0,0,3,1,2,0,0,0,1,0,1,2,0,3,0,2,0,2,1,0,3,2,0,0,3,2,2,0,3}, {2,2,2,1,2,1,1,2,2,3,3,1,1,2,2,2,2,2,3,3,2,2,3,1,2,2,3,2,1,3,2,2,3,2,2,2,2,3,2,2,2,2,2,2,3,2,2,2,3,2,2,2,2,2,2,2,3,2,0,2,1,2,2,2,2,2,2,3,2,2,1,2,2,1,2,1,2,2,2,1,3,1,2,2,3,1,2,3,3,2,2,2,2,2,1,2,2,2,2,2}, {0,1,0,1,0,0,2,0,2,0,0,0,1,0,1,0,1,0,0,0,0,0,2,2,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,1,0,0,2,0,0,1,1,0,0,0,0,0,0,0,0,0,1,2,0,0,1,1,0,2,2,2,0,2,3,1,0,1,0,1,1,0,0,2,1,1,2,0,0,0,1,1,0,0,0,1,1,2,0,2,0,2,1}, {1,1,2,1,1,1,2,2,2,2,0,0,1,1,2,2,2,0,1,2,0,2,1,1,1,2,1,1,1,2,3,2,0,2,1,2,0,3,2,1,3,0,2,1,3,2,2,0,1,1,0,2,2,1,1,1,2,3,0,1,2,2,0,1,1,1,2,3,0,0,1,2,0,0,0,0,2,1,1,1,2,1,1,1,0,2,1,2,1,0,2,1,2,2,2,1,2,2,3,1}, {0,0,3,0,0,0,2,0,2,2,0,2,0,0,3,0,3,0,0,0,0,0,2,1,0,3,0,0,0,2,3,0,0,0,0,2,0,3,0,0,2,0,0,0,0,2,3,0,3,0,0,2,2,0,0,0,0,0,0,1,2,3,0,0,0,0,0,2,0,0,1,2,0,0,0,0,3,1,1,0,0,0,0,2,0,2,0,3,0,0,2,0,0,1,0,0,0,0,3,0}, {3,0,3,0,0,0,2,0,2,3,2,1,0,0,3,0,2,0,0,0,0,0,2,1,0,3,3,0,0,2,3,0,0,0,0,3,1,2,0,0,2,0,0,0,3,3,2,0,2,0,2,2,2,2,0,0,2,0,0,1,1,2,0,0,3,0,2,2,0,3,1,2,3,0,2,0,3,2,2,0,3,0,1,2,0,2,0,3,0,0,3,0,2,2,1,0,0,0,3,0}, {0,0,3,0,0,0,2,0,2,3,0,2,0,0,2,0,3,0,0,0,0,0,2,1,0,2,0,0,0,3,2,0,0,0,0,2,0,2,0,0,2,0,0,0,3,3,3,0,2,0,0,2,2,2,0,0,0,0,0,0,2,2,0,0,0,0,0,3,0,0,2,3,0,0,0,0,3,1,2,0,0,0,0,2,0,3,0,3,0,0,2,0,1,3,0,0,0,0,2,0}, {0,0,2,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,2,0,0,0,1,0,0,1,0,2,0,1,0,0,1,0,0}, {0,0,3,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,2,0,0,0,1,1,0,0,0,0,0,0,1,0,0,2,0,0,0,0,2,2,0,2,0,0,2,1,0,0,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,3,3,0,0,0,0,1,2,0,0,0,1,0,2,0,3,0,1,0,0,1,0,0,2,0,0,0,0,1,0}, {0,0,0,0,0,1,0,3,0,0,0,0,0,2,0,3,0,0,2,2,0,0,0,0,3,0,0,0,0,0,0,2,0,1,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,1,1,0,0,0}, {0,0,3,0,0,0,0,0,3,2,0,0,0,0,0,0,3,0,1,0,0,0,0,2,0,1,0,0,0,2,2,0,0,0,0,1,0,3,0,0,2,0,0,0,0,3,2,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,1,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1}, {0,0,0,0,0,2,0,2,0,0,0,0,0,3,0,3,0,0,2,3,0,0,0,0,2,0,0,0,0,0,0,2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,2,3,0,0,0}, {0,2,0,0,3,0,0,2,0,0,0,0,2,0,0,0,0,3,2,2,2,3,0,0,0,0,0,2,2,0,0,0,2,0,2,0,0,0,1,2,0,2,3,2,0,0,0,3,0,1,1,0,0,0,0,1,2,3,0,1,0,0,1,2,1,2,0,0,0,0,0,0,0,3,0,2,0,0,0,2,1,0,2,0,2,0,0,0,3,3,0,3,3,0,0,0,0,2,0,1}, {0,0,0,0,0,3,0,2,0,0,0,0,0,3,0,3,0,0,1,2,0,0,0,0,3,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,0,2,0,0,0,0,0,0,3,2,0,0,0}, {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0}, {0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0}, {2,2,2,1,2,2,2,2,2,2,1,2,2,2,1,3,0,1,2,3,3,3,2,2,2,2,3,1,2,2,3,2,1,2,1,2,2,2,2,2,1,2,2,0,2,0,3,2,2,2,2,2,1,2,2,1,1,0,2,1,2,2,2,2,3,2,1,2,1,2,2,3,2,2,1,3,1,2,2,1,2,1,1,3,2,2,3,2,3,2,1,2,2,2,1,3,2,1,2,2}, {0,0,0,0,0,3,0,2,0,0,0,0,0,3,0,3,0,0,3,3,0,0,0,0,3,0,0,0,0,0,0,3,0,3,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,2,0,0,0,0,0,0,3,2,0,0,0}, {68,27,38,27,52,32,21,42,9,34,17,19,8,26,70,48,33,55,53,22,22,27,55,65,23,42,63,35,50,22,57,51,55,52,16,55,34,50,22,20,50,70,25,20,20,75,35,45,24,46,45,62,8,56,29,10,37,33,43,8,47,17,36,22,17,44,16,27,30,19,38,36,52,33,8,61,25,32,19,31,17,35,20,25,52,48,47,22,40,47,55,7,51,10,8,36,60,41,51,25}};
  float y[6][100] = {{0,0,1,0,0,0,1,0,1,1,0,1,0,0,1,0,1,0,0,0,0,0,1,1,0,1,0,0,0,1,1,0,0,0,0,1,0,1,0,0,1,0,0,0,1,1,1,0,1,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,1,0,0,0,0,1,0}, {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0}, {0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0}, {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}, {1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0}};
  float a[6][34] = {{2.2704519, 2.7787329, 1.6132070, 4.7673651, 1.4725547,-9.0375773,-5.7366348, 1.4536696, 1.3752446,-1.7010889, 2.7898977,-1.5656407,-6.7948817, 5.0820905,-9.7088623,-2.1097331,-5.6952202, 4.7233587,-1.8654948, 1.0178103, 7.0584454, 1.1128639, 4.6885475, 3.3404944,-1.9815618, 1.8708605, 9.6329617,-6.2791093,-1.6407801,-5.2202656, 6.4057614, 5.4388179,-9.8402028, 8.9470613}, { 1.2552094, 6.4705289,-3.1909575, 9.5593064,-1.3424153,-5.7579081, 3.6307113,-3.4559471, 1.1829042,-8.2159554,-3.6283503,-3.4202655, 1.3985033, 9.1597617,-8.3268702, 5.0630446, 2.3841863,-4.5643948,-3.4093676,-4.1530712,-4.1013727, 2.7195574,-1.7715070, 1.2080903, 2.2467331,-4.4127287,-5.4509881, 9.3374424,-3.8643432,-1.6432860,-1.6006597,-2.8985152, 3.8876793,-4.7652977}, { 7.9969065,-8.9842366,-1.5421763, 2.2110104,-7.2794967, 9.5720445,-3.0478295, 4.3327634,-4.5228306,-3.6854571, 1.7147598, 1.4711449,-2.5236096,-8.8801453,-3.8100828, 2.4506126, 1.7482714, 2.3306095, 7.5442664,-5.3089216,-1.1411112, 2.6957557, 1.0080414, 6.0259292, 4.1294371, 5.8967015, 2.1797625,-8.3311834, 7.8318833,-2.7256788, 7.8541814, 5.5393736, 1.1969017, 1.2030698}, { 1.5069802,-3.5190883, 3.8579779,-9.9156531, 1.7634370,-7.0952979, 1.2364292,-3.7246607,-4.2339563, 1.0472215,-2.9958365,-5.5576548,-9.9866125,-7.1674223,-2.1264902, 5.2033382, 3.3129057,-3.2672905, 5.7419492,-5.4440309,-6.1208230,-6.5951498,-1.0703042,-8.9847203,-4.7019413, 3.8537484, 2.7170030, 3.8501160,-1.1264717,-7.3737350,-8.5387109, 5.2617242,-5.6261134, 2.4005573}, { 1.2682263,-2.9337759,-8.3065273, 1.1550570,-1.2125758,-2.0107666, 5.7943976,-1.5215889, 8.9171934, 6.6630893,-1.3352946, 1.6073103,-2.7373369,-1.8539506, 3.0192226,-5.0412639, 1.3296088, 4.1539604,-4.9730795,-3.5577013, 5.7378342,-4.0273721,-1.1965798,-1.4569869, 1.9679719,-9.1536589, 2.4795372,-2.2130476,-2.2940499, 5.9743272,-1.2499255, 1.9726931,-2.4234439, 4.3846740}, { 2.6803798, 9.5997392,-1.7125384, 2.3292346,-1.7517142, 7.8267477, 4.9562514,-4.6332282, 2.7032375,-1.4544708, 4.7562760, 1.0803813, 2.9022642,-2.9781038,-9.7243947,-1.1119055, 1.0318547, 2.6418986,-5.0144105, 5.2822519,-9.7278112,-1.4282693,-3.8310243,-2.8392009, 6.3753645,-2.0621210,-9.9196105, 8.6294202, 1.7944087, 2.3468405, 3.5889974, 5.3794788, 3.8402739,-1.3034574}};
  float resultado[6][1];
float teste[34][1] = {{3}, {2}, {2}, {1}, {3}, {3}, {0}, {3}, {0}, {0}, {0}, {3}, {0}, {0}, {0}, {3}, {2}, {0}, {3}, {0}, {0}, {0}, {0}, {0}, {2}, {0}, {3}, {3}, {3}, {0}, {0}, {2}, {2}, {34}};//Coluna 1
  int linhas, colunas;
  multiplica((float*)a, 6, 36, (float*)teste, 34, 1, (float*)resultado, &linhas, &colunas);
  exibirDiagnostico((float*)resultado);
  mostraMatriz((float*)resultado, 6, 1);


	return 0;
}

void lerTeste(float* teste)
{
  int i = 0;
  char caractere;
  String dados = "";
  int numeroRecebido;
  while(i < 34){
    if (Serial.available() > 0) {
      caractere = Serial.read();
      dados += caractere; 
      numeroRecebido = dados.toInt(); 
      Serial.println(numeroRecebido);
    }

  }
  
  

}
void treinar(float* x, float* y, float *a){
  float tx[100][34];
  float xTx[34][34];
  float xTxInv[34][34];
  float yTx[6][34];
  int linhasXtx, colunasXtx, l, c;
  transposta((float*)x, 34, 100, (float*)tx);
  multiplica((float*)x, 34, 100, (float*)tx, 100, 34, (float*)xTx, &linhasXtx, &colunasXtx);
  inversa((float*)xTx, 34, (float*)xTxInv);
  multiplica((float*)y, 6, 100, (float*)tx, 100, 34, (float*)yTx, &l, &c);
  multiplica((float*)yTx, 6, 34, (float*)xTxInv, 34, 34, (float*)a, &l, &c);
  
  
}
void inversa(float *matriz, int ordem, float *resultado){
	int linha, coluna, k;
	float pivo, m;
	identidade(matriz, resultado, ordem);


	for(coluna = 0; coluna < ordem; coluna++){
	    pivo = matriz[coluna*ordem+coluna];
		for(k = 0; k < ordem; k++){
			matriz[coluna*ordem+k] = (matriz[coluna*ordem+k])/(pivo); //L1 -> L1/pivo , L2 -> L2/pivo, L3 -> L3/pivo
			resultado[coluna*ordem+k] = (resultado[coluna*ordem+k])/(pivo); //Ex: 1 0 0 / pivo  , 0 1 0 / pivo,   0 0 1/ pivo
		}

		for(linha = 0; linha < ordem; linha++){
			if(linha != coluna){
				m = matriz[linha*ordem+coluna];
				for(k = 0; k < ordem; k++){
					matriz[linha*ordem+k] = (matriz[linha*ordem+k]) - (m*matriz[coluna*ordem+k]); //Ex: L2 -> L2 - ( 1"m" - L1)
					resultado[linha*ordem+k] = (resultado[linha*ordem+k]) - (m*resultado[coluna*ordem+k] );

				}
			}
		}
	}


}
void transposta(float *matriz, int linhas, int colunas, float *transposta)
{
	int i, j;
	for (i = 0; i < linhas; i++){
		for (j = 0; j < colunas; j++){
			transposta[j*linhas+i] = matriz[i*colunas+j];
		}
   }
}

int multiplica(
		float *a, int linhasA, int colunasA,
		float *b, int linhasB, int colunasB,
		float *resultado, int *linhasR, int *colunasR)
{
	int i, j, k;//Vari√°veis para controle de la√ßos.
	if(colunasA != linhasB){
		printf("Erro na multiplica√ß√£o: Matrizes incompat√≠veis para esta opera√ß√£o.\t\n");
		return 0;
	}
	*colunasR = colunasB;
	*linhasR = linhasA;
	for(i = 0; i < linhasA; i++){
		for(j = 0; j < colunasB; j++){
			resultado[i*colunasB+j] = 0.0;
			for(k = 0; k < colunasA; k++){
				resultado[i*(colunasB)+j] += a[i*colunasA+k]*b[k*colunasB+j];
			}
		}
	}
	return 1;
}


void identidade(float *matriz, float *resultado, int ordem){
	int i, j;
	for (i = 0; i < ordem; i++) {
		for (j = 0; j < ordem; j++) {
			if (i == j)
			{
				resultado[i*ordem+j] = 1;
			} else {
				resultado[i*ordem+j] = 0;
			}
		}
	}
}
void mostraMatriz(float *matriz, int linhas, int colunas){
	int i, j;
	for(i = 0; i < linhas; i++){
		for(j = 0; j < colunas; j++){
        Serial.print(matriz[i*colunas+j]);
        Serial.print("\t");
		}
		Serial.print("\n");
	}
}

void exibirDiagnostico(float *matriz) {
	int linhas = 6;
	int colunas = 1;
	int i, j, index = 0;
	float maior = 0.0;
	for (i = 0; i < linhas; i++) {
		for (j = 0; j < colunas; j++) {
			if (matriz[i * colunas + j] > maior) {
				maior = matriz[i * colunas + j];
				index = i;
			}
		}
	}
	switch (index) {
	case 0:
		Serial.println("Psoriase");
		break;
	case 1:
		Serial.println("Dermatite seborreica");
		break;
	case 2:
		Serial.println("Liquen Plano");
		break;
	case 3:
		Serial.println("Pititr√≠ase rosea");
		break;
	case 4:
		Serial.println("Dermatite cronica");
		break;
	case 5:
		Serial.println("Pitiriase rubra pilar");
		break;
	}
}
